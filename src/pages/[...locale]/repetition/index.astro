---
import { i18n } from "astro:config/client";
import { getCollection } from "astro:content";
import Base from "$layouts/Base.astro";
import Repetition from "$components/repetition/Repetition.svelte";
import Icon from "$components/Icon.astro";
import i18nit from "$i18n";

export const prerender = true;

export async function getStaticPaths() {
	const locales = i18n?.locales || ["en", "zh-cn"];

	return locales.map(locale => ({
		params: {
			locale: locale === i18n?.defaultLocale ? undefined : locale
		}
	}));
}

const localeParam = Astro.params.locale;
const locale = typeof localeParam === "string" ? localeParam : i18n!.defaultLocale;

const t = i18nit(locale);

const allRepetitions = await getCollection("repetition", entry => {
	return entry.id.startsWith(locale + "/") && !entry.data.draft;
});

const sortedRepetitions = allRepetitions.sort((a, b) => {
	if (b.data.top !== a.data.top) {
		return b.data.top - a.data.top;
	}
	return new Date(b.data.timestamp).getTime() - new Date(a.data.timestamp).getTime();
});

const repetitionsData = sortedRepetitions.map(item => ({
	id: item.id,
	data: {
		top: item.data.top,
		title: item.data.title,
		series: item.data.series,
		tags: item.data.tags || [],
		sensitive: item.data.sensitive,
		timestamp: item.data.timestamp
	}
}));

const series_list = [...new Set(allRepetitions.map(item => item.data.series).filter(Boolean))].sort();
const tag_list = [...new Set(allRepetitions.flatMap(item => item.data.tags || []))].sort();
---

<Base title={t("navigation.repetition")} {locale}>
	<main class="flex flex-col grow">
		<Repetition client:load {locale} allRepetitions={repetitionsData} {series_list} {tag_list}>
			<Icon name="lucide:flag-triangle-right" slot="top" />
			<Icon name="lucide:siren" title={t("sensitive.icon")} slot="sensitive" />
			<Icon name="lucide:arrow-left" slot="left" />
			<Icon name="lucide:arrow-right" slot="right" />
			<Icon name="lucide:ellipsis" slot="dots" />
		</Repetition>
	</main>
</Base>
