---
import { i18n } from "astro:config/client";
import { getCollection } from "astro:content";
import Base from "$layouts/Base.astro";
import Note from "$components/note/Note.svelte";
import Icon from "$components/Icon.astro";
import i18nit from "$i18n";

export const prerender = true;

const { locale = i18n!.defaultLocale } = Astro.params;

const t = i18nit(locale);

// Get all notes for this locale
const allNotes = await getCollection('note', (entry) => {
	return entry.id.startsWith(locale + '/') && !entry.data.draft;
});

// Sort notes by timestamp (newest first) and then by top priority
const sortedNotes = allNotes.sort((a, b) => {
	if (b.data.top !== a.data.top) {
		return b.data.top - a.data.top;
	}
	return new Date(b.data.timestamp).getTime() - new Date(a.data.timestamp).getTime();
});

// Prepare notes data for client-side rendering
const notesData = sortedNotes.map(note => ({
	id: note.id,
	data: {
		top: note.data.top,
		title: note.data.title,
		series: note.data.series,
		tags: note.data.tags || [],
		sensitive: note.data.sensitive,
		timestamp: note.data.timestamp
	}
}));

// Extract unique series and tags
const series_list = [...new Set(allNotes.map(note => note.data.series).filter(Boolean))].sort();
const tag_list = [...new Set(allNotes.flatMap(note => note.data.tags || []))].sort();
---

<Base title={t("navigation.note")} {locale}>
	<main class="flex flex-col grow">
		<Note client:load {locale} allNotes={notesData} {series_list} {tag_list}>
			<Icon name="lucide:flag-triangle-right" slot="top" />
			<Icon name="lucide:siren" title={t("sensitive.icon")} slot="sensitive" />
			<Icon name="lucide:arrow-left" slot="left" />
			<Icon name="lucide:arrow-right" slot="right" />
			<Icon name="lucide:ellipsis" slot="dots" />
		</Note>
	</main>
</Base>
