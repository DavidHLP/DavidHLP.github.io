---
import { i18n } from "astro:config/client";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Heatmap from "$components/Heatmap.svelte";
import config from "$config";
import i18nit from "$i18n";

export async function getStaticPaths() {
	// Create path for each locale, omitting default locale from URL
	return i18n!.locales.map(locale => ({ params: { locale: locale == i18n?.defaultLocale ? undefined : (locale as string) } }));
}

const { locale = i18n!.defaultLocale } = Astro.params;

const t = i18nit(locale);

// Get preface content for current locale, sorted by timestamp (newest first)
const prefaces = (
	await getCollection("preface", preface => {
		// Extract language and ID from file path structure
		const [language, id] = preface.id.split("/");
		preface.id = id;

		// Filter by current locale
		return language == locale;
	})
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published notes for current locale, sorted by timestamp (newest first)
const notes = (
	await getCollection("note", note => {
		// Extract language and note ID from file path structure
		const [language] = note.id.split("/");

		// Filter published notes by current locale
		return !note.data.draft && language == locale;
	})
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published jottings for current locale
const jottings = await getCollection("jotting", jotting => {
	// Extract language and jotting ID from file path structure
	const [language] = jotting.id.split("/");

	// Filter published jottings by current locale
	return !jotting.data.draft && language == locale;
});

// Get the most recent note for display
const newest = notes[0];

// Get all prefaces for random selection (across all languages)
const allPrefaces = await getCollection("preface", preface => preface.data.random);

// Group prefaces by ID (same content in different languages)
const prefaceGroups = new Map();
allPrefaces.forEach(preface => {
	const [language, id] = preface.id.split("/");
	if (!prefaceGroups.has(id)) {
		prefaceGroups.set(id, {});
	}
	prefaceGroups.get(id)[language] = preface;
});

// Select a random preface group and get the version for current locale
let preface = null;
if (prefaceGroups.size > 0) {
	// Generate a true random number for each page load
	const randomIndex = Math.floor(Math.random() * prefaceGroups.size);
	const selectedGroup = Array.from(prefaceGroups.values())[randomIndex];

	// Try to get the preface for current locale, fallback to any available language
	preface = selectedGroup[locale] || Object.values(selectedGroup)[0];
} else if (prefaces.length > 0) {
	// Fallback to most recent preface if no random prefaces available
	preface = prefaces[0];
}

// Preface content is now available directly from preface.body
---

<Base title={t("navigation.home")} {locale}>
	<main class="flex flex-col gap-5 sm:gap-20 flex-grow">
		<header class="flex items-center justify-center flex-wrap-reverse grow-0.6">
			{config.prologue && <article class="mr-a font-cursive font-thin text-size-xl sm:text-size-2xl line-height-loose whitespace-pre-line">{config.prologue}</article>}
			<Icon name="site-logo" size={100} is:inline />
		</header>

		{
			preface && (
				<section class="flex flex-col">
					<figure class="max-w-2xl mx-auto my-8">
						<p class="font-serif font-thin text-lg md:text-xl text-gray-800 leading-relaxed">
							"{preface.body}"
						</p>
						{preface.data.title && (
							<figcaption class="text-right mt-4 pr-2 font-serif text-stone-500 italic">
								{preface.data.title}
							</figcaption>
						)}
					</figure>
					<a href={getRelativeLocaleUrl(locale, "/preface")} class="self-end my-2 text-size-sm c-secondary">
						—— {Time.date.locale(preface.data.timestamp, locale)}
					</a>
				</section>
			)
		}

		{
			newest && (
				<footer class="flex items-center justify-center flex-wrap-reverse gap-10">
					<Heatmap {locale} {notes} {jottings} />

					<blockquote class="flex-grow">
						<h3>{t("home.newest")}</h3>
						<div class="flex flex-col sm:flex-row justify-between gap-1 mt-2">
							<a href={getRelativeLocaleUrl(locale, `/note/${newest.id.split("/").slice(1).join("/")}`)} class="link">
								{newest.data.series ? `${newest.data.series} | ` : ""}
								{newest.data.title}
							</a>
							<div class="flex gap-1">
								{newest.data.tags?.map(tag => (
									<span class="c-remark text-size-sm">#{tag}</span>
								))}
							</div>
						</div>
						<time title={Time.full(newest.data.timestamp)} class="c-remark font-mono text-xs">
							{Time(newest.data.timestamp)}
						</time>
					</blockquote>
				</footer>
			)
		}
	</main>
</Base>
