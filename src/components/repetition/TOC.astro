---
const Self = Astro.self;

const { headings } = Astro.props;
---

<style lang="less">
	ul {
		margin-left: 1rem;

		font-size: 0.9rem;
		list-style: none;

		a {
			color: var(--weak-color);
			line-height: 1.5;

			transition:
				color 0.15s ease-in-out,
				font-weight 0.15s ease-in-out;

			&:hover,
			&:is(li.indicate > a) {
				font-weight: bold;
				color: var(--primary-color);
			}
		}

		li {
			position: relative;

			&::before {
				content: "";
				position: absolute;
				top: -0.2rem;
				left: -0.5rem;
				height: 100%;
				border-left: 1px solid var(--remark-color);
			}

			&:last-child {
				&::before {
					height: 1rem;
				}
			}

			&::after {
				content: "";
				position: absolute;
				top: 0.8rem;
				left: -0.5rem;
				border-bottom: 1px solid var(--remark-color);
				width: 5px;
			}
		}

		ul {
			margin-top: 0.2rem;
		}
	}
</style>

<ul>
	{
		headings.map((heading: any) => (
			<li id={`indicator-${heading.slug}`}>
				<a href={`#${heading.slug}`}>{heading.text}</a>
				{heading.subheadings?.length > 0 && <Self headings={heading.subheadings} />}
			</li>
		))
	}
</ul>

<script>
	let observer: IntersectionObserver | undefined;

	function TOC() {
		const indicators = new Map<string, Element>(
			document
				.querySelectorAll("li[id^='indicator-']")
				.values()
				.map(indicator => [indicator.id.replace(/^indicator-/, ""), indicator])
		);

		observer?.disconnect();

		observer = new IntersectionObserver(entries => entries.forEach(({ target, isIntersecting }) => indicators.get(target.getAttribute("aria-labelledby")!)?.classList.toggle("indicate", isIntersecting)));

		document
			.querySelector("#markdown-content")
			?.querySelectorAll("section[data-heading-rank]")
			.forEach(section => observer?.observe(section));
	}

	TOC();

	document.addEventListener("astro:after-swap", TOC);
</script>
